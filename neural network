#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan  6 11:26:12 2020

@author: baptistebignaud
"""
import numpy as np
import job
import randint

# Définition des paramètres
alpha=1
beta=1
A=500
B=500
D=500
C=200  

#Définition des paramètres de précision sur la recherche du minimum


#%%
def kronecker(i,j):
    if i==j:
        return 1
    return 0

#%%
#Définition matrice de poids et constante externe
def W_ijkl(i,j,k,l):
    return((-A*kronecker(i,k)*(1-kronecker(j,l))
           -B*kronecker(j,l)*(1-kronecker(i,k))
           -C
           -D*kronecker(i,k)*(kronecker(l,j+1)+kronecker(l,j-1))))

def I_ij(L_jobs):
    N=len(L_jobs)
    return(N*C)


    

#%%
#Définition fonction objectif

#Quadruple somme avec indices i,j,k,l
def quadruple_somme(L_jobs,X):
    S_quadruple=0
    N=len(L_jobs)
    for i in range (N):
        for j in range (N):
            for k in range (N):
                for l in range (N):
                    S_quadruple+=W_ijkl(i,j,k,l)* X[i][j]*X[k][l]
    return S_quadruple

def double_somme(L_jobs,X):
    S_double=0
    N=len(L_jobs)
    for i in range (N):
        for j in range(N):
            S_double+=I_ij(L_jobs)*X[i][j]
    return S_double

                
def fonction_objectif(X,L_jobs):
    N=len(L_jobs)
    fonction_obj=-(quadruple_somme(L_jobs, X))/2+double_somme(L_jobs, X)+(C*N**2)/2
    return(fonction_obj)
                   
            
#%%
    
def f(X,L_jobs):
    N=len(L_jobs)
    f_X=np.zeros(N,N)
    for i in range(N):
        for j in range(N):
            if X[i][j]>0:
                f_X[i][j]=1
            else:
                f_X[i][j]=0
    return f_X

def X_t_plus_1(L_jobs,X):
    X_copy=X.copy()
    N=len(L_jobs)
    X_t_plus_1=np.zeros(N,N)
    for i in range(N):
        for j in range(N):
            for k in range(N):
                for l in range(N):
                    X_t_plus_1[i][j]+=W_ijkl(i, j, k, l)*f(X,L_jobs)    #Attention à gérer pour avoir f(t) et non f(t+1)
            X_t_plus_1+=I_ij(L_jobs)
    return X_t_plus_1
    
    
    

#%%


def calcul_distance(L_jobs):
    N=len(L_jobs)
    D=np.zeros(N,N)
    for i in range (N):
        for j in range (N):
            D[i][j]=alpha*sum(L_jobs[i].duree_op[:N-1])+beta*L_jobs[j].duree_op(N)
    return D

#%%
def calcul_ordo(L_jobs, nb_iter_max):
    N=len(L_jobs)
    X=np.zeros(N,N)
    
    
    #initialisation
    for i in range (N):
        for j in range(N):
            X[i][j]=randint(0,1)
    
    while 
    
    

    
            
